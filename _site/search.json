[
  
    {
      "title"    : "Greatest Common Divisor",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/gcd'>Greatest Common Divisor<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-03-14T18:23:45-07:00'>14 March 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Calculate the greatest common divisor fo two positive integers.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/python' class='article__tag'>python</a><a href='/tag/algorithms' class='article__tag'>algorithms</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "python and algorithms",
      "url"      : "/gcd",
      "date"     : "2021-03-14 18:23:45 -0700",
      "content"  : "Greatest Common DivisorCalculate the greatest common divisor fo two positive integers.Input: Two positive integers.Output: The greatest common divisor.The greatest common divisor GCD(a, b) of two positive integers a and b is the largest integer d that divides both a and b.Input format: Two integers a and b separated by a space.Output format: GCD(a, b).Example:Input:3918848 1653264Output:61232Naive algorithmGCD(a, b):best &lt;- 0for d from 1 to a+b:    if (d/a and d/b):        best &lt;- dreturn best            Fast algorithmeuclidGCD(a, b):if b = 0:    return aaPrima &lt;- the reminder when a is divided by b    return euclidGCD(b, aPrima)         Python implementationdef euclidGCD(a, b):    if b == 0:        return a    aP = a % b    return euclidGCD(b, aP)Completed code"
    } ,
  
    {
      "title"    : "Fibonacci Number",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/fibonacci'>Fibonacci Number<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-03-10T17:23:45-08:00'>10 March 2021</time> – <span class='article__minutes'>1 min read</span> </div><p class='article__excerpt'>Calculate the _n_-th Fibonacci number.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/python' class='article__tag'>python</a><a href='/tag/algorithms' class='article__tag'>algorithms</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "python and algorithms",
      "url"      : "/fibonacci",
      "date"     : "2021-03-10 17:23:45 -0800",
      "content"  : "Fibonacci NumberCalculate the n-th Fibonacci number.Input: An integer n.Output: n-th Fibonacci number.Fn = F(n-1) + F(n-2)Fibonacci numbers are defined recursively:    F(n) =        n                  if n is 0 or 1       F(n-1) + F(n-2)    if n ≥ 2  Input format: An integer n.Output format: Fn.Example:Input:10Output:55Naive algorithmfibonacci(n):if n ≤ 1:    return nreturn fibonacci(n-1) + fibonacci(n-2)            Fast algorithmfibonacciList(n):create an array F(0...n)F[0] &lt;- 0F[1] &lt;- 1for i from 2 to n:    F[i] &lt;- F[i-1] + F[i-2]return F[n]         Python implementationdef fib_list(n):    number_list = [None] * (n + 1)    number_list[0] = 0    number_list[1] = 1    for i in range(2, n + 1):        number_list[i] = number_list[i - 1] + number_list[i - 2]    return number_list[n]Full code"
    } ,
  
    {
      "title"    : "Maximum Pairwise Product",
      "article"  : "<div class='article col col-12 animate'> <div class='article__inner'> <div class='article__content'> <h2 class='article__title'> <a href='/maximum-pairwise-product'>Maximum Pairwise Product<i class='ion ion-md-arrow-round-forward'></i></a> </h2> <div class='article__meta'> <time class='article__date' datetime='2021-02-26T17:23:45-08:00'>26 February 2021</time> – <span class='article__minutes'>2min read</span> </div><p class='article__excerpt'>Get the maximum pairwise product of two different elements in a sequence of non-negative integers.</p><div class='article__bottom'><div class='article-tags__box'><a href='/tag/python' class='article__tag'>python</a><a href='/tag/algorithms' class='article__tag'>algorithms</a></div></div></div></div></div>",
      "category" : "",
      "tags"     : "python and algorithms",
      "url"      : "/maximum-pairwise-product",
      "date"     : "2021-02-26 17:23:45 -0800",
      "content"  : "Maximum Pairwise ProductGet the maximum pairwise product of two different elements in a sequence of non-negative integers.Input: A sequence of non-negative integers.Output: The maximum value that can be obtained by multiplying two different elements from the integer sequence.Given a sequence of non-negative integers a1,…,an, compute:  max ai * aj where 1 ≤ i ≠ j ≤ nNote that i and j should be different, but it may be the case that ai = aj.Input format: The first line contains an integer n. The next cointains a sequence of n non-negative integers where a1,…,an are separated by spaces.Output format: The maximun pairwise product.Example:Input:32 7 4Output:28                   2      7      4              2             14      8              7      14             28              4      8      28             Naive algorithmmaxPairwiseProductNaive(A[1..n]):product &lt;- 0for i from 1 to n:  from j from 1 to n:    if i ≠ j:      if product &lt; A[i]*A[j]:        product &lt;- A[i]*A[j]return product        Fast algorithmmaxPairwiseProductFast(A[1..n]):index1 &lt;- 1for i from 2 to n:  if A[i] &gt; A[index1]:    index1 &lt;- iif index1 = 1:  index2 = 2else  index2 = 1from i from 1 to n:  if i ≠ index1 and A[i] &gt; A[index2]:    index2 &lt;- ireturn A[index1] * A[index2]        Python implementationdef max_pairwise_product(numbers):    index1 = 0    n = len(numbers)    for index in range(1, n):        if numbers[index] &gt; numbers[index1]:            index1 = index    if index1 == 0:        index2 = 1    else:        index2 = 0    for index in range(1, n):        if index != index1 and numbers[index] &gt; numbers[index2]:            index2 = index    return numbers[index1] * numbers[index2]Full code"
    } 
  
]
